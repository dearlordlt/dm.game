package ucc.logging.client  {
	import flash.external.ExternalInterface;
	import ucc.util.sprintf;
	
/**
 * Browser console client
 *
 * @version $Id$
 */
public class BrowserConsoleClient implements LoggingClient {
	
	/**
	 * Minified console log support script.
	 * 
	 * Script taken from: http://patik.com/demos/consolelog/consolelog.js
	 * Original JS script:
	
	// Tell IE9 to use its built-in console
	if (Function.prototype.bind && (typeof console === 'object' || typeof console === 'function') && typeof console.log == "object") {
	  ["log","info","warn","error","assert","dir","clear","profile","profileEnd"]
		.forEach(function (method) {
		  console[method] = this.call(console[method], console);
		}, Function.prototype.bind);
	}

	// log() -- The complete, cross-browser (we don't judge!) console.log wrapper for his or her logging pleasure
	if (!window.log) {
	  window.log = function () {
		log.history = log.history || [];  // store logs to an array for reference
		log.history.push(arguments);
		// Modern browsers
		if (typeof console != 'undefined' && typeof console.log == 'function') {

		  // Opera 11
		  if (window.opera) {
			var i = 0;
			while (i < arguments.length) {
			  console.log("Item " + (i+1) + ": " + arguments[i]);
			  i++;
			}
		  }

		  // All other modern browsers
		  else if ((Array.prototype.slice.call(arguments)).length == 1 && typeof Array.prototype.slice.call(arguments)[0] == 'string') {
			console.log( (Array.prototype.slice.call(arguments)).toString() );
		  }
		  else {
			console.log( Array.prototype.slice.call(arguments) );
		  }

		}

		// IE8
		else if (!Function.prototype.bind && typeof console != 'undefined' && typeof console.log == 'object') {
		  Function.prototype.call.call(console.log, console, Array.prototype.slice.call(arguments));
		}

		// IE7 and lower, and other old browsers
		else {
		  // Inject Firebug lite
		  if (!document.getElementById('firebug-lite')) {
			// Include the script
			var script = document.createElement('script');
			script.type = "text/javascript";
			script.id = 'firebug-lite';
			// If you run the script locally, point to /path/to/firebug-lite/build/firebug-lite.js
			script.src = 'https://getfirebug.com/firebug-lite.js';
			// If you want to expand the console window by default, uncomment this line
			//document.getElementsByTagName('HTML')[0].setAttribute('debug','true');
			document.getElementsByTagName('HEAD')[0].appendChild(script);
			setTimeout(function () { log( Array.prototype.slice.call(arguments) ); }, 2000);
		  }
		  else {
			// FBL was included but it hasn't finished loading yet, so try again momentarily
			setTimeout(function () { log( Array.prototype.slice.call(arguments) ); }, 500);
		  }
		}
	  };
	}		 
		 
	 */
	private static const CONSOLE_SUPPORT_SCRIPT : String = "function(){if(Function.prototype.bind&&(typeof console==\"object\"||typeof console==\"function\")&&typeof console.log==\"object\"){[\"log\",\"info\",\"warn\",\"error\",\"assert\",\"dir\",\"clear\",\"profile\",\"profileEnd\"].forEach(function(method){console[method]=this.call(console[method],console);},Function.prototype.bind);}\r\nif(!window.log){window.log=function(){log.history=log.history||[];log.history.push(arguments);if(typeof console!=\'undefined\'&&typeof console.log==\'function\'){if(window.opera){var i=0;while(i<arguments.length){console.log(\"Item \"+(i+1)+\": \"+arguments[i]);i++;}}\r\nelse if((Array.prototype.slice.call(arguments)).length==1&&typeof Array.prototype.slice.call(arguments)[0]==\'string\'){console.log((Array.prototype.slice.call(arguments)).toString());}\r\nelse{console.log(Array.prototype.slice.call(arguments));}}\r\nelse if(!Function.prototype.bind&&typeof console!=\'undefined\'&&typeof console.log==\'object\'){Function.prototype.call.call(console.log,console,Array.prototype.slice.call(arguments));}\r\nelse{if(!document.getElementById(\'firebug-lite\')){var script=document.createElement(\'script\');script.type=\"text\/javascript\";script.id=\'firebug-lite\';script.src=\'https:\/\/getfirebug.com\/firebug-lite.js\';document.getElementsByTagName(\'HEAD\')[0].appendChild(script);setTimeout(function(){log(Array.prototype.slice.call(arguments));},2000);}\r\nelse{setTimeout(function(){log(Array.prototype.slice.call(arguments));},500);}}}}}";
	
	/** Code injected? */
	protected var consoleSupported		: Boolean;
	
	/**
	 * Class constructor
	 */
	public function BrowserConsoleClient () {
		
		// check if console.log is supported
		if ( ExternalInterface.available ) {
				
			try {
				ExternalInterface.call( "console.log", "" );
			} catch ( error : Error ) {
				// inject console.log support script
				try {
					ExternalInterface.call( CONSOLE_SUPPORT_SCRIPT );
					this.consoleSupported = true;
				} catch ( error : Error ) {
					ExternalInterface.call( "alert", "Failed to inject console.log() support code!" );
				}
				
				
			}
			
		}
		
	}
	
	/**
	 * Output message
	 */
	public function output ( message : *, level : String, caller : * = null ) : void {
		if ( this.consoleSupported ) {
			ExternalInterface.call( "function ( message ) { console.log( message ) }",  sprintf( "Log(%s): %s", level, message ) );
		} else {
			trace( sprintf( "Log(%s): %s", level, message ) );
		}
	}
	
}

}